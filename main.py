from google_images_download import google_images_download
import Augmentor
from retrain import retrain
import argparse
import os.path

FLAGS = None

def downloadAndDataAugmentation():
    output_directory = os.path.join("dataset", "download")

    # Load classes from CSV and creating dataset
    classesFile = open(FLAGS.classes, "r")
    for classData in classesFile:
        className, classKeywords = classData.split(",")
        classFolder = os.path.join(output_directory, className)
        
        if not FLAGS.no_download:
            # Check how many images already were downloaded for this class
            # This will be useful if some error occured in previous execution
            try:
                imagesDownloaded = len([name for name in os.listdir(classFolder) if os.path.isfile(os.path.join(classFolder, name))])
            except:
                imagesDownloaded = 0

            if imagesDownloaded < FLAGS.qtd_downloads:
                # Download images
                response = google_images_download.googleimagesdownload()
                arguments = {
                    "keywords": classKeywords,
                    "limit": FLAGS.qtd_downloads,
                    "format": "jpg",
                    "color_type": "full-color",
                    "size": "large",
                    "offset": imagesDownloaded,
                    "print_urls": True,
                    "output_directory": output_directory,
                    "image_directory": className
                }
                response.download(arguments)

        if not FLAGS.no_augmentation:
            # Check how many images already were augmented for this class
            # This will be useful if some error occured in previous execution
            classFolderAugmentation = os.path.join("dataset", "augmented", className)
            try:
                imagesAugmented = len([name for name in os.listdir(classFolderAugmentation) if os.path.isfile(os.path.join(classFolderAugmentation, name))])
            except:
                imagesAugmented = 0

            if imagesAugmented < FLAGS.qtd_augmented:
                # Data augmentation
                p = Augmentor.Pipeline(
                        classFolder, 
                        os.path.join("..", "..", "augmented", className))
                p.rotate(probability=0.7, max_left_rotation=25, max_right_rotation=25)
                p.zoom(probability=0.5, min_factor=1.1, max_factor=1.5)
                p.crop_random(probability=0.7, percentage_area=0.8)  
                p.flip_left_right(probability=0.5)
                p.resize(probability=1.0, width=300, height=300)
                p.sample(FLAGS.qtd_augmented - imagesAugmented)
                p.process()


if __name__ == '__main__':
  parser = argparse.ArgumentParser()

  parser.add_argument(
      '--qtd_downloads',
      type=int,
      default=50,
      help='How many images will be downloaded for each class.'
  )
  parser.add_argument(
      '--qtd_augmented',
      type=int,
      default=200,
      help='How many images will be generated by image augmentation.'
  )
  parser.add_argument(
      '--classes',
      type=str,
      default="samples/pokemon151.csv",
      help='Relative path to the file where are listed the classes and keywords.'
  )
  parser.add_argument(
      '--no_download',
      default=False,
      help='Should perform download images for each class?',
      action="store_true"
  )
  parser.add_argument(
      '--no_augmentation',
      default=False,
      help='Should perform augmentation for each class?',
      action="store_true"
  )
  parser.add_argument(
      '--no_training',
      default=False,
      help='Should perform training to generate the new model?',
      action="store_true"
  )
  parser.add_argument(
      '--steps',
      type=int,
      default=4000,
      help='How many steps on training process.'
  )
  parser.add_argument(
      '--architecture',
      type=str,
      default="inception_v3",
      help='Relative path to the file where are listed the classes and keywords.'
  )
  FLAGS = parser.parse_args()

  downloadAndDataAugmentation()

  if not FLAGS.no_training:
    retrain(FLAGS.steps, FLAGS.architecture)